import { Candle } from "../src/Candle";
import { IClient } from "../src/IClient";
import { Level2Snapshot } from "../src/Level2Snapshots";
import { Level2Update } from "../src/Level2Update";
import { Level3Snapshot } from "../src/Level3Snapshot";
import { Level3Update } from "../src/Level3Update";
import { Market } from "../src/Market";
import { Ticker } from "../src/Ticker";
import { Trade } from "../src/Trade";
export declare const wait: (ms?: number) => Promise<unknown>;
export declare type TestSpec = {
    clientFactory: () => IClient;
    clientName: string;
    exchangeName: string;
    skip?: boolean;
    fetchMarkets?: () => Promise<Market[]>;
    markets?: Market[];
    fetchTradeMarkets?: () => Promise<Market[]>;
    tradeMarkets?: Market[];
    fetchAllMarkets?: () => Promise<Market[]>;
    allMarkets?: Market[];
    unsubWaitMs?: number;
    getEventingSocket?: (client: IClient, market: Market) => any;
    marketIdList?: string[];
    marketBaseList?: string[];
    marketQuoteList?: string[];
    testConnectEvents?: boolean;
    testDisconnectEvents?: boolean;
    testReconnectionEvents?: boolean;
    testCloseEvents?: boolean;
    testAllMarketsTrades?: boolean;
    testAllMarketsTradesSuccess?: number;
    testAllMarketsL2Updates?: boolean;
    testAllMarketsL2UpdatesSuccess?: number;
    hasTickers?: boolean;
    hasTrades?: boolean;
    hasCandles?: boolean;
    hasLevel2Snapshots?: boolean;
    hasLevel2Updates?: boolean;
    hasLevel3Snapshots?: boolean;
    hasLevel3Updates?: boolean;
    ticker?: TickerOptions;
    trade?: TradeOptions;
    candle?: CandleOptions;
    l2snapshot?: L2SnapshotOptions;
    l2update?: L2UpdateOptions;
    l3snapshot?: L3SnapshotOptions;
    l3update?: L3UpdateOptions;
};
export declare type TickerOptions = {
    hasTimestamp?: boolean;
    hasLast?: boolean;
    hasOpen?: boolean;
    hasHigh?: boolean;
    hasLow?: boolean;
    hasVolume?: boolean;
    hasQuoteVolume?: boolean;
    hasChange?: boolean;
    hasChangePercent?: boolean;
    hasBid?: boolean;
    hasBidVolume?: boolean;
    hasAsk?: boolean;
    hasAskVolume?: boolean;
    hasSequenceId?: boolean;
};
export declare type TradeOptions = {
    hasTradeId?: boolean;
    hasSequenceId?: boolean;
    tradeIdPattern?: RegExp;
    tests?: (spec: any, result: any) => void;
};
export declare type CandleOptions = {
    hasSequenceId?: boolean;
    tests?: (spec: any, result: any) => void;
};
export declare type L2SnapshotOptions = {
    hasTimestampMs?: boolean;
    hasSequenceId?: boolean;
    hasCount?: boolean;
    hasEventId?: boolean;
    tests?: (spec: any, result: any) => void;
};
export declare type L2UpdateOptions = {
    hasSnapshot?: boolean;
    hasTimestampMs?: boolean;
    hasSequenceId?: boolean;
    hasLastSequenceId?: boolean;
    hasEventId?: boolean;
    hasEventMs?: boolean;
    hasCount?: boolean;
    tests?: (spec: any, result: any) => void;
    done?: (spec: any, result: any, update: Level2Update) => boolean;
};
export declare type L3UpdateOptions = {
    hasSnapshot?: boolean;
    hasTimestampMs?: boolean;
    hasSequenceId?: boolean;
    hasCount?: boolean;
    orderIdPattern?: RegExp;
    tests?: (spec: any, result: any) => void;
    done?: (spec: any, result: any, update: Level3Update) => boolean;
};
export declare type L3SnapshotOptions = {
    hasTimestampMs?: boolean;
    hasSequenceId?: boolean;
    tests?: (spec: any, result: any) => void;
};
export declare type TestRunnerState = {
    client?: IClient;
};
export declare type TestRunnerResult = {
    ready?: boolean;
    market?: Market;
    ticker?: Ticker;
    trade?: Trade;
    candle?: Candle;
    snapshot?: Level2Snapshot | Level3Snapshot;
    snapMarket?: Market;
    update?: Level2Update | Level3Update;
    updateMarket?: Market;
};
export declare function testClient(spec: TestSpec): void;
